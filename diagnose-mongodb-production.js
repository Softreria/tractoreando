const mongoose = require('mongoose');
const { execSync } = require('child_process');
require('dotenv').config();

// Configuraci√≥n de conexi√≥n
const mongoOptions = {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  serverSelectionTimeoutMS: 10000,
  socketTimeoutMS: 20000,
  bufferMaxEntries: 0
};

// Funci√≥n para ejecutar comandos del sistema
function runCommand(command) {
  try {
    const output = execSync(command, { encoding: 'utf8', timeout: 10000 });
    return { success: true, output: output.trim() };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

// Funci√≥n para verificar el estado de MongoDB
async function checkMongoDBStatus() {
  console.log('\nüîç === DIAGN√ìSTICO DE MONGODB ===\n');
  
  // 1. Verificar si MongoDB est√° ejecut√°ndose
  console.log('1Ô∏è‚É£ Verificando estado del servicio MongoDB...');
  const mongoStatus = runCommand('systemctl is-active mongodb || systemctl is-active mongod');
  
  if (mongoStatus.success && mongoStatus.output === 'active') {
    console.log('‚úÖ MongoDB est√° ejecut√°ndose');
  } else {
    console.log('‚ùå MongoDB no est√° ejecut√°ndose');
    console.log('üîß Soluci√≥n: sudo systemctl start mongodb');
    return false;
  }
  
  // 2. Verificar puerto
  console.log('\n2Ô∏è‚É£ Verificando puerto 27017...');
  const portCheck = runCommand('netstat -tlnp | grep :27017 || ss -tlnp | grep :27017');
  
  if (portCheck.success && portCheck.output.includes('27017')) {
    console.log('‚úÖ Puerto 27017 est√° abierto');
  } else {
    console.log('‚ùå Puerto 27017 no est√° disponible');
    console.log('üîß Verificar configuraci√≥n de MongoDB');
  }
  
  // 3. Verificar espacio en disco
  console.log('\n3Ô∏è‚É£ Verificando espacio en disco...');
  const diskSpace = runCommand('df -h /');
  
  if (diskSpace.success) {
    console.log('üíæ Espacio en disco:');
    console.log(diskSpace.output);
    
    // Verificar si hay menos del 10% de espacio libre
    const lines = diskSpace.output.split('\n');
    const rootLine = lines.find(line => line.includes('/') && !line.includes('/dev'));
    if (rootLine) {
      const usage = rootLine.match(/(\d+)%/);
      if (usage && parseInt(usage[1]) > 90) {
        console.log('‚ö†Ô∏è Poco espacio en disco disponible');
      }
    }
  }
  
  // 4. Verificar memoria
  console.log('\n4Ô∏è‚É£ Verificando memoria disponible...');
  const memInfo = runCommand('free -h');
  
  if (memInfo.success) {
    console.log('üß† Memoria del sistema:');
    console.log(memInfo.output);
  }
  
  // 5. Verificar logs de MongoDB
  console.log('\n5Ô∏è‚É£ Verificando logs recientes de MongoDB...');
  const mongoLogs = runCommand('journalctl -u mongodb -n 10 --no-pager || journalctl -u mongod -n 10 --no-pager');
  
  if (mongoLogs.success) {
    console.log('üìã √öltimos logs de MongoDB:');
    console.log(mongoLogs.output);
  } else {
    console.log('‚ö†Ô∏è No se pudieron obtener los logs de MongoDB');
  }
  
  return true;
}

// Funci√≥n para probar la conexi√≥n a MongoDB
async function testMongoConnection() {
  console.log('\nüîó === PRUEBA DE CONEXI√ìN ===\n');
  
  const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/tractoreando';
  console.log(`üéØ URI de conexi√≥n: ${mongoUri}`);
  
  try {
    console.log('üîå Intentando conectar...');
    
    const connection = await mongoose.connect(mongoUri, mongoOptions);
    console.log('‚úÖ Conexi√≥n establecida exitosamente');
    
    // Probar operaciones b√°sicas
    console.log('\nüìä Probando operaciones b√°sicas...');
    
    // Ping
    await mongoose.connection.db.admin().ping();
    console.log('‚úÖ Ping exitoso');
    
    // Listar colecciones
    const collections = await mongoose.connection.db.listCollections().toArray();
    console.log(`‚úÖ Colecciones encontradas: ${collections.length}`);
    
    if (collections.length > 0) {
      console.log('üìã Colecciones:');
      collections.forEach(col => {
        console.log(`  - ${col.name}`);
      });
    }
    
    // Probar operaci√≥n de escritura simple
    console.log('\n‚úçÔ∏è Probando operaci√≥n de escritura...');
    const testCollection = mongoose.connection.db.collection('test_connection');
    
    const testDoc = { 
      test: true, 
      timestamp: new Date(),
      message: 'Prueba de conexi√≥n exitosa'
    };
    
    await testCollection.insertOne(testDoc);
    console.log('‚úÖ Escritura exitosa');
    
    // Probar operaci√≥n de lectura
    console.log('üìñ Probando operaci√≥n de lectura...');
    const readResult = await testCollection.findOne({ test: true });
    
    if (readResult) {
      console.log('‚úÖ Lectura exitosa');
    }
    
    // Limpiar documento de prueba
    await testCollection.deleteOne({ test: true });
    console.log('üßπ Documento de prueba eliminado');
    
    await mongoose.connection.close();
    console.log('üîå Conexi√≥n cerrada correctamente');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Error de conexi√≥n:', error.message);
    
    // Diagn√≥stico espec√≠fico del error
    if (error.message.includes('ECONNREFUSED')) {
      console.log('\nüîß SOLUCI√ìN: MongoDB no est√° ejecut√°ndose');
      console.log('   sudo systemctl start mongodb');
      console.log('   sudo systemctl enable mongodb');
    } else if (error.message.includes('authentication failed')) {
      console.log('\nüîß SOLUCI√ìN: Error de autenticaci√≥n');
      console.log('   Verificar credenciales en MONGODB_URI');
    } else if (error.message.includes('timeout')) {
      console.log('\nüîß SOLUCI√ìN: Timeout de conexi√≥n');
      console.log('   1. Verificar que MongoDB est√© ejecut√°ndose');
      console.log('   2. Verificar firewall y puertos');
      console.log('   3. Verificar configuraci√≥n de red');
    }
    
    return false;
  }
}

// Funci√≥n para verificar configuraci√≥n del sistema
async function checkSystemConfiguration() {
  console.log('\n‚öôÔ∏è === CONFIGURACI√ìN DEL SISTEMA ===\n');
  
  // 1. Verificar variables de entorno
  console.log('1Ô∏è‚É£ Variables de entorno:');
  console.log(`   NODE_ENV: ${process.env.NODE_ENV || 'no definido'}`);
  console.log(`   MONGODB_URI: ${process.env.MONGODB_URI ? 'definido' : 'no definido'}`);
  
  if (process.env.MONGODB_URI) {
    // Ocultar credenciales en la salida
    const safeUri = process.env.MONGODB_URI.replace(/\/\/([^:]+):([^@]+)@/, '//***:***@');
    console.log(`   URI (segura): ${safeUri}`);
  }
  
  // 2. Verificar archivo .env
  console.log('\n2Ô∏è‚É£ Verificando archivo .env...');
  const envCheck = runCommand('ls -la .env');
  
  if (envCheck.success) {
    console.log('‚úÖ Archivo .env encontrado');
    console.log(envCheck.output);
  } else {
    console.log('‚ùå Archivo .env no encontrado');
    console.log('üîß Crear archivo .env con MONGODB_URI');
  }
  
  // 3. Verificar versi√≥n de Node.js
  console.log('\n3Ô∏è‚É£ Versi√≥n de Node.js:');
  console.log(`   ${process.version}`);
  
  // 4. Verificar dependencias cr√≠ticas
  console.log('\n4Ô∏è‚É£ Verificando dependencias...');
  try {
    const mongoose = require('mongoose');
    console.log(`‚úÖ Mongoose: ${mongoose.version}`);
  } catch (error) {
    console.log('‚ùå Mongoose no encontrado');
  }
}

// Funci√≥n para generar reporte de soluciones
function generateSolutionReport() {
  console.log('\nüõ†Ô∏è === SOLUCIONES RECOMENDADAS ===\n');
  
  console.log('üöÄ Para resolver timeouts de MongoDB:');
  console.log('\n1Ô∏è‚É£ Ejecutar script de correcci√≥n:');
  console.log('   node fix-mongodb-timeout.js');
  
  console.log('\n2Ô∏è‚É£ Reiniciar MongoDB:');
  console.log('   sudo systemctl restart mongodb');
  console.log('   sudo systemctl status mongodb');
  
  console.log('\n3Ô∏è‚É£ Verificar configuraci√≥n de MongoDB:');
  console.log('   sudo nano /etc/mongod.conf');
  console.log('   # Verificar bindIp y puerto');
  
  console.log('\n4Ô∏è‚É£ Aumentar timeouts en la aplicaci√≥n:');
  console.log('   # Ya implementado en fix-mongodb-timeout.js');
  
  console.log('\n5Ô∏è‚É£ Cargar datos con script optimizado:');
  console.log('   node load-data-production.js');
  
  console.log('\n6Ô∏è‚É£ Monitorear logs en tiempo real:');
  console.log('   sudo journalctl -u mongodb -f');
  
  console.log('\nüìû Si persisten los problemas:');
  console.log('   - Verificar recursos del servidor (CPU, RAM, disco)');
  console.log('   - Considerar optimizaci√≥n de MongoDB');
  console.log('   - Revisar configuraci√≥n de red y firewall');
}

// Funci√≥n principal
async function diagnoseProduction() {
  console.log('üè• DIAGN√ìSTICO DE MONGODB EN PRODUCCI√ìN');
  console.log('=' .repeat(50));
  
  try {
    // 1. Verificar estado del sistema
    await checkSystemConfiguration();
    
    // 2. Verificar MongoDB
    const mongoOk = await checkMongoDBStatus();
    
    // 3. Probar conexi√≥n
    if (mongoOk) {
      await testMongoConnection();
    }
    
    // 4. Generar reporte de soluciones
    generateSolutionReport();
    
    console.log('\n‚úÖ Diagn√≥stico completado');
    
  } catch (error) {
    console.error('\n‚ùå Error durante el diagn√≥stico:', error.message);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  diagnoseProduction();
}

module.exports = { 
  diagnoseProduction, 
  checkMongoDBStatus, 
  testMongoConnection,
  checkSystemConfiguration 
};