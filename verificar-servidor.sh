#!/bin/bash

# Script de verificaci√≥n para el servidor de producci√≥n
# Ejecutar con: bash verificar-servidor.sh

echo "=== VERIFICACI√ìN DEL SERVIDOR TRACTOREANDO ==="
echo "Fecha: $(date)"
echo "Usuario: $(whoami)"
echo "Directorio actual: $(pwd)"
echo ""

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar estado
check_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úì $2${NC}"
    else
        echo -e "${RED}‚úó $2${NC}"
    fi
}

check_warning() {
    echo -e "${YELLOW}‚ö† $1${NC}"
}

echo "1. VERIFICANDO ARCHIVOS DE CONFIGURACI√ìN..."
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Verificar archivos principales
if [ -f ".env.production" ]; then
    echo -e "${GREEN}‚úì .env.production existe${NC}"
    echo "   Contenido:"
    grep -E "^(NODE_ENV|PORT|BASE_URL)" .env.production | sed 's/^/   /'
else
    echo -e "${RED}‚úó .env.production NO EXISTE${NC}"
fi

if [ -f ".env" ]; then
    echo -e "${GREEN}‚úì .env existe${NC}"
else
    echo -e "${YELLOW}‚ö† .env no existe (se usar√° .env.production)${NC}"
fi

if [ -f "frontend/.env.production" ]; then
    echo -e "${GREEN}‚úì frontend/.env.production existe${NC}"
    echo "   API URL: $(grep REACT_APP_API_URL frontend/.env.production)"
else
    echo -e "${RED}‚úó frontend/.env.production NO EXISTE${NC}"
fi

if [ -f "ecosystem.config.js" ]; then
    echo -e "${GREEN}‚úì ecosystem.config.js existe${NC}"
else
    echo -e "${RED}‚úó ecosystem.config.js NO EXISTE${NC}"
fi

if [ -f "server.js" ]; then
    echo -e "${GREEN}‚úì server.js existe${NC}"
else
    echo -e "${RED}‚úó server.js NO EXISTE${NC}"
fi

echo ""
echo "2. VERIFICANDO DEPENDENCIAS..."
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Verificar Node.js
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    echo -e "${GREEN}‚úì Node.js instalado: $NODE_VERSION${NC}"
else
    echo -e "${RED}‚úó Node.js NO INSTALADO${NC}"
fi

# Verificar npm
if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm --version)
    echo -e "${GREEN}‚úì npm instalado: $NPM_VERSION${NC}"
else
    echo -e "${RED}‚úó npm NO INSTALADO${NC}"
fi

# Verificar PM2
if command -v pm2 &> /dev/null; then
    PM2_VERSION=$(pm2 --version)
    echo -e "${GREEN}‚úì PM2 instalado: $PM2_VERSION${NC}"
else
    echo -e "${RED}‚úó PM2 NO INSTALADO${NC}"
fi

# Verificar dependencias del proyecto
if [ -d "node_modules" ]; then
    echo -e "${GREEN}‚úì Dependencias del backend instaladas${NC}"
else
    echo -e "${RED}‚úó Dependencias del backend NO INSTALADAS${NC}"
fi

if [ -d "frontend/node_modules" ]; then
    echo -e "${GREEN}‚úì Dependencias del frontend instaladas${NC}"
else
    echo -e "${RED}‚úó Dependencias del frontend NO INSTALADAS${NC}"
fi

# Verificar build del frontend
if [ -d "frontend/build" ]; then
    echo -e "${GREEN}‚úì Build del frontend existe${NC}"
    if [ -f "frontend/build/index.html" ]; then
        echo -e "${GREEN}‚úì index.html del build existe${NC}"
    else
        echo -e "${RED}‚úó index.html del build NO EXISTE${NC}"
    fi
else
    echo -e "${RED}‚úó Build del frontend NO EXISTE${NC}"
fi

echo ""
echo "3. VERIFICANDO SERVICIOS..."
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Verificar MongoDB
if command -v mongod &> /dev/null; then
    echo -e "${GREEN}‚úì MongoDB instalado${NC}"
    if systemctl is-active --quiet mongod; then
        echo -e "${GREEN}‚úì MongoDB est√° ejecut√°ndose${NC}"
    else
        echo -e "${RED}‚úó MongoDB NO est√° ejecut√°ndose${NC}"
    fi
else
    echo -e "${RED}‚úó MongoDB NO INSTALADO${NC}"
fi

# Verificar Nginx
if command -v nginx &> /dev/null; then
    NGINX_VERSION=$(nginx -v 2>&1 | cut -d' ' -f3)
    echo -e "${GREEN}‚úì Nginx instalado: $NGINX_VERSION${NC}"
    if systemctl is-active --quiet nginx; then
        echo -e "${GREEN}‚úì Nginx est√° ejecut√°ndose${NC}"
    else
        echo -e "${RED}‚úó Nginx NO est√° ejecut√°ndose${NC}"
    fi
else
    echo -e "${RED}‚úó Nginx NO INSTALADO${NC}"
fi

echo ""
echo "4. VERIFICANDO PUERTOS..."
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Verificar puerto 5000 (backend)
if lsof -i:5000 &> /dev/null; then
    PROCESS_5000=$(lsof -i:5000 | tail -n 1 | awk '{print $1, $2}')
    echo -e "${GREEN}‚úì Puerto 5000 en uso por: $PROCESS_5000${NC}"
else
    echo -e "${YELLOW}‚ö† Puerto 5000 libre${NC}"
fi

# Verificar puerto 80
if lsof -i:80 &> /dev/null; then
    echo -e "${GREEN}‚úì Puerto 80 en uso (HTTP)${NC}"
else
    echo -e "${YELLOW}‚ö† Puerto 80 libre${NC}"
fi

# Verificar puerto 443
if lsof -i:443 &> /dev/null; then
    echo -e "${GREEN}‚úì Puerto 443 en uso (HTTPS)${NC}"
else
    echo -e "${YELLOW}‚ö† Puerto 443 libre${NC}"
fi

echo ""
echo "5. VERIFICANDO PM2..."
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

if command -v pm2 &> /dev/null; then
    echo "Estado de procesos PM2:"
    pm2 status
    echo ""
    
    if pm2 list | grep -q "tractoreando"; then
        echo -e "${GREEN}‚úì Aplicaci√≥n 'tractoreando' encontrada en PM2${NC}"
        echo "√öltimas l√≠neas del log:"
        pm2 logs tractoreando --lines 5 --nostream
    else
        echo -e "${YELLOW}‚ö† Aplicaci√≥n 'tractoreando' NO encontrada en PM2${NC}"
    fi
else
    echo -e "${RED}‚úó PM2 no disponible${NC}"
fi

echo ""
echo "6. VERIFICANDO CONFIGURACI√ìN DE NGINX..."
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

if [ -f "/etc/nginx/sites-available/tractoreando" ]; then
    echo -e "${GREEN}‚úì Configuraci√≥n de Nginx existe${NC}"
else
    echo -e "${RED}‚úó Configuraci√≥n de Nginx NO EXISTE${NC}"
fi

if [ -L "/etc/nginx/sites-enabled/tractoreando" ]; then
    echo -e "${GREEN}‚úì Sitio habilitado en Nginx${NC}"
else
    echo -e "${RED}‚úó Sitio NO habilitado en Nginx${NC}"
fi

# Verificar sintaxis de Nginx
if command -v nginx &> /dev/null; then
    if nginx -t &> /dev/null; then
        echo -e "${GREEN}‚úì Configuraci√≥n de Nginx es v√°lida${NC}"
    else
        echo -e "${RED}‚úó Configuraci√≥n de Nginx tiene errores${NC}"
        echo "Errores:"
        nginx -t 2>&1 | sed 's/^/   /'
    fi
fi

echo ""
echo "7. VERIFICANDO SSL..."
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

if [ -f "/etc/letsencrypt/live/tractoreando.softreria.com/fullchain.pem" ]; then
    echo -e "${GREEN}‚úì Certificado SSL existe${NC}"
    CERT_EXPIRY=$(openssl x509 -enddate -noout -in /etc/letsencrypt/live/tractoreando.softreria.com/fullchain.pem | cut -d= -f2)
    echo "   Expira: $CERT_EXPIRY"
else
    echo -e "${YELLOW}‚ö† Certificado SSL NO EXISTE${NC}"
fi

echo ""
echo "8. VERIFICANDO CONECTIVIDAD..."
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Test local del backend
echo "Probando backend local..."
if curl -s -f http://localhost:5000/api/health &> /dev/null; then
    echo -e "${GREEN}‚úì Backend responde en localhost:5000${NC}"
else
    echo -e "${RED}‚úó Backend NO responde en localhost:5000${NC}"
fi

# Test a trav√©s de Nginx local (importante para proxy manager)
echo "Probando a trav√©s de Nginx local..."
if curl -s -f http://localhost/health &> /dev/null; then
    echo -e "${GREEN}‚úì Nginx local responde en puerto 80${NC}"
else
    echo -e "${RED}‚úó Nginx local NO responde en puerto 80${NC}"
fi

# Test del dominio (si est√° configurado)
echo "Probando dominio p√∫blico..."
if curl -s -f https://tractoreando.softreria.com/api/health &> /dev/null; then
    echo -e "${GREEN}‚úì API p√∫blica responde${NC}"
else
    echo -e "${YELLOW}‚ö† API p√∫blica NO responde (normal si SSL no est√° configurado)${NC}"
fi

if curl -s -f https://tractoreando.softreria.com &> /dev/null; then
    echo -e "${GREEN}‚úì Frontend p√∫blico responde${NC}"
else
    echo -e "${YELLOW}‚ö† Frontend p√∫blico NO responde (normal si SSL no est√° configurado)${NC}"
fi

echo ""
echo "9. INFORMACI√ìN DEL SISTEMA..."
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

echo "Sistema operativo: $(lsb_release -d 2>/dev/null | cut -f2 || uname -s)"
echo "Arquitectura: $(uname -m)"
echo "Memoria total: $(free -h | awk '/^Mem:/ {print $2}')"
echo "Memoria disponible: $(free -h | awk '/^Mem:/ {print $7}')"
echo "Espacio en disco: $(df -h / | awk 'NR==2 {print $4" disponible de "$2}')"
echo "Carga del sistema: $(uptime | awk -F'load average:' '{print $2}')"

echo ""
echo "10. RESUMEN Y RECOMENDACIONES..."
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Contador de problemas
PROBLEMS=0

# Verificaciones cr√≠ticas
if [ ! -f ".env.production" ]; then
    echo -e "${RED}‚ùå CR√çTICO: Falta archivo .env.production${NC}"
    ((PROBLEMS++))
fi

if [ ! -f "frontend/.env.production" ]; then
    echo -e "${RED}‚ùå CR√çTICO: Falta archivo frontend/.env.production${NC}"
    ((PROBLEMS++))
fi

if [ ! -d "frontend/build" ]; then
    echo -e "${RED}‚ùå CR√çTICO: Falta build del frontend${NC}"
    ((PROBLEMS++))
fi

if ! command -v pm2 &> /dev/null; then
    echo -e "${RED}‚ùå CR√çTICO: PM2 no est√° instalado${NC}"
    ((PROBLEMS++))
fi

if ! systemctl is-active --quiet mongod; then
    echo -e "${RED}‚ùå CR√çTICO: MongoDB no est√° ejecut√°ndose${NC}"
    ((PROBLEMS++))
fi

if [ $PROBLEMS -eq 0 ]; then
    echo -e "${GREEN}üéâ ¬°Todo parece estar en orden!${NC}"
    echo "Puedes proceder con el despliegue."
else
    echo -e "${RED}‚ö†Ô∏è  Se encontraron $PROBLEMS problemas cr√≠ticos.${NC}"
    echo "Revisa los errores anteriores antes de continuar."
fi

echo ""
echo "=== FIN DE LA VERIFICACI√ìN ==="
echo "Para m√°s detalles, revisa el archivo COMANDOS-SERVIDOR-DIRECTO.md"