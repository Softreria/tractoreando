const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
require('dotenv').config();

// Importar modelos
const User = require('./models/User');
const Company = require('./models/Company');

async function finalFix() {
  try {
    console.log('üîß REPARACI√ìN FINAL DEL LOGIN');
    console.log('================================');
    
    // Conectar a MongoDB
    console.log('üîå Conectando a MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Conectado a MongoDB');
    
    // Verificar variables de entorno cr√≠ticas
    console.log('\nüîç VERIFICANDO VARIABLES DE ENTORNO:');
    const requiredVars = {
      'NODE_ENV': process.env.NODE_ENV,
      'JWT_SECRET': process.env.JWT_SECRET,
      'MONGODB_URI': process.env.MONGODB_URI,
      'DEFAULT_ADMIN_EMAIL': process.env.DEFAULT_ADMIN_EMAIL,
      'DEFAULT_ADMIN_PASSWORD': process.env.DEFAULT_ADMIN_PASSWORD
    };
    
    let allVarsOk = true;
    for (const [key, value] of Object.entries(requiredVars)) {
      if (value) {
        console.log(`   ${key}: ‚úÖ Configurado`);
      } else {
        console.log(`   ${key}: ‚ùå NO CONFIGURADO`);
        allVarsOk = false;
      }
    }
    
    if (!allVarsOk) {
      console.log('\n‚ùå Faltan variables de entorno cr√≠ticas');
      return;
    }
    
    // Buscar empresa admin
    console.log('\nüè¢ VERIFICANDO EMPRESA ADMIN...');
    let adminCompany = await Company.findOne({ name: 'Tractoreando Admin' });
    
    if (!adminCompany) {
      console.log('   üìù Creando empresa admin...');
      adminCompany = new Company({
        name: 'Tractoreando Admin',
        email: 'admin@tractoreando.com',
        phone: '+34000000000',
        address: 'Oficina Central',
        isActive: true
      });
      await adminCompany.save();
      console.log('   ‚úÖ Empresa admin creada');
    } else {
      console.log('   ‚úÖ Empresa admin encontrada');
    }
    
    // Eliminar usuario admin existente
    console.log('\nüë§ REGENERANDO USUARIO ADMIN...');
    await User.deleteOne({ email: process.env.DEFAULT_ADMIN_EMAIL });
    console.log('   üóëÔ∏è  Usuario admin anterior eliminado');
    
    // Generar hash de contrase√±a
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(process.env.DEFAULT_ADMIN_PASSWORD, saltRounds);
    console.log('   üîê Nueva contrase√±a hasheada generada');
    
    // Crear nuevo usuario admin
    const newAdmin = new User({
      name: 'Administrador',
      lastName: 'Sistema',
      email: process.env.DEFAULT_ADMIN_EMAIL,
      password: hashedPassword,
      phone: '+34000000000',
      company: adminCompany._id,
      role: 'super_admin',
      isActive: true,
      permissions: {
        users: { create: true, read: true, update: true, delete: true },
        companies: { create: true, read: true, update: true, delete: true },
        vehicles: { create: true, read: true, update: true, delete: true },
        maintenance: { create: true, read: true, update: true, delete: true },
        reports: { create: true, read: true, update: true, delete: true },
        branches: { create: true, read: true, update: true, delete: true }
      }
    });
    
    await newAdmin.save();
    console.log('   ‚úÖ Nuevo usuario admin creado');
    
    // Verificar usuario creado
    const verifyUser = await User.findOne({ email: process.env.DEFAULT_ADMIN_EMAIL }).populate('company');
    console.log('\nüîç VERIFICACI√ìN DEL USUARIO:');
    console.log(`   üìß Email: ${verifyUser.email}`);
    console.log(`   üîë Rol: ${verifyUser.role}`);
    console.log(`   ‚úÖ Activo: ${verifyUser.isActive}`);
    console.log(`   üè¢ Empresa: ${verifyUser.company.name}`);
    console.log(`   üîí Bloqueado: ${verifyUser.isLocked}`);
    
    // Probar comparaci√≥n de contrase√±a
    console.log('\nüîê PROBANDO CONTRASE√ëA...');
    const passwordMatch1 = await bcrypt.compare(process.env.DEFAULT_ADMIN_PASSWORD, verifyUser.password);
    const passwordMatch2 = await verifyUser.comparePassword(process.env.DEFAULT_ADMIN_PASSWORD);
    
    console.log(`   üîç Comparaci√≥n directa bcrypt: ${passwordMatch1 ? '‚úÖ V√ÅLIDA' : '‚ùå INV√ÅLIDA'}`);
    console.log(`   üîç M√©todo del modelo: ${passwordMatch2 ? '‚úÖ V√ÅLIDA' : '‚ùå INV√ÅLIDA'}`);
    
    // Probar generaci√≥n de JWT
    console.log('\nüé´ PROBANDO GENERACI√ìN DE JWT...');
    try {
      const testPayload = {
        userId: verifyUser._id,
        email: verifyUser.email,
        role: verifyUser.role,
        company: verifyUser.company._id
      };
      
      const token = jwt.sign(testPayload, process.env.JWT_SECRET, { expiresIn: '24h' });
      console.log('   ‚úÖ JWT generado correctamente');
      
      // Verificar JWT
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      console.log('   ‚úÖ JWT verificado correctamente');
      console.log(`   üë§ Usuario en token: ${decoded.email}`);
      
    } catch (jwtError) {
      console.log('   ‚ùå Error con JWT:', jwtError.message);
    }
    
    // Simular proceso completo de login
    console.log('\nüöÄ SIMULANDO PROCESO DE LOGIN...');
    try {
      // 1. Buscar usuario
      const loginUser = await User.findOne({ email: process.env.DEFAULT_ADMIN_EMAIL }).populate('company');
      if (!loginUser) {
        console.log('   ‚ùå Usuario no encontrado');
        return;
      }
      
      // 2. Verificar si est√° activo
      if (!loginUser.isActive) {
        console.log('   ‚ùå Usuario inactivo');
        return;
      }
      
      // 3. Verificar si est√° bloqueado
      if (loginUser.isLocked) {
        console.log('   ‚ùå Usuario bloqueado');
        return;
      }
      
      // 4. Verificar empresa activa
      if (!loginUser.company.isActive) {
        console.log('   ‚ùå Empresa inactiva');
        return;
      }
      
      // 5. Comparar contrase√±a
      const isPasswordValid = await loginUser.comparePassword(process.env.DEFAULT_ADMIN_PASSWORD);
      if (!isPasswordValid) {
        console.log('   ‚ùå Contrase√±a inv√°lida');
        return;
      }
      
      // 6. Generar token
      const tokenPayload = {
        userId: loginUser._id,
        email: loginUser.email,
        role: loginUser.role,
        company: loginUser.company._id,
        permissions: loginUser.permissions
      };
      
      const accessToken = jwt.sign(tokenPayload, process.env.JWT_SECRET, { expiresIn: '24h' });
      
      console.log('   ‚úÖ PROCESO DE LOGIN EXITOSO');
      console.log('   üé´ Token generado correctamente');
      
    } catch (loginError) {
      console.log('   ‚ùå Error en simulaci√≥n de login:', loginError.message);
    }
    
    console.log('\nüéâ REPARACI√ìN COMPLETADA');
    console.log('================================');
    console.log('üìã CREDENCIALES DE LOGIN:');
    console.log(`   üìß Email: ${process.env.DEFAULT_ADMIN_EMAIL}`);
    console.log(`   üîë Contrase√±a: ${process.env.DEFAULT_ADMIN_PASSWORD}`);
    console.log('\n‚ö†Ô∏è  IMPORTANTE:');
    console.log('   1. Reinicia el servidor para cargar las nuevas variables de entorno');
    console.log('   2. Aseg√∫rate de que el archivo .env.production est√© en la ra√≠z del proyecto');
    console.log('   3. Verifica que el servidor est√© leyendo el archivo .env.production');
    
  } catch (error) {
    console.error('‚ùå Error en reparaci√≥n final:', error);
  } finally {
    // Desconectar de MongoDB
    console.log('\nüîå Desconectando de MongoDB...');
    await mongoose.disconnect();
    console.log('‚úÖ Desconectado');
  }
}

// Ejecutar reparaci√≥n
finalFix();